# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProcessingPDF
                                 A QGIS plugin
 Allow to export PDFs from Processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-10
        copyright            : (C) 2018 by Olivier Dalang / SPC
        email                : olivier.dalang@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Olivier Dalang / SPC'
__date__ = '2018-09-10'
__copyright__ = '(C) 2018 by Olivier Dalang / SPC'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import Qt, QCoreApplication, QFile, QTemporaryDir
from qgis.PyQt.QtXml import QDomDocument
from qgis.PyQt.QtWidgets import (QWidget,
                                 QVBoxLayout,
                                 QHBoxLayout,
                                 QPushButton,
                                 QLabel,
                                 QPlainTextEdit,
                                 QLineEdit,
                                 QComboBox,
                                 QListWidget,
                                 QCheckBox,
                                 QSizePolicy,
                                 QDialogButtonBox,
                                 QListWidgetItem)

from qgis.core import (Qgis,
                       QgsFeatureSink,
                       QgsProcessing,
                       QgsProcessingFeedback,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterMapLayer,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterMultipleLayers,
                       QgsProcessingParameterString,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingOutputString,
                       QgsProject,
                       QgsMessageLog,
                       QgsReadWriteContext,
                       QgsVectorFileWriter,
                       QgsLayoutExporter,
                       QgsLayerTreeLayer)

from processing.gui.AlgorithmDialog import AlgorithmDialog
from processing.gui.AlgorithmDialogBase import AlgorithmDialogBase
from processing.gui.ParametersPanel import ParametersPanel
from processing.gui.MultipleInputPanel import MultipleInputPanel
from processing.gui.NumberInputPanel import NumberInputPanel
from processing.gui.DestinationSelectionPanel import DestinationSelectionPanel
from processing.tools.dataobjects import createContext

import os.path
import tempfile
import shutil

from xml.etree import ElementTree as et

from .base import SpcAlgorithm

class ProjectFromString(SpcAlgorithm):
    """
    ProjectFromString takes a string input a returns a qgis project as a file.

    It can be used in conjunction with ReplaceDataSource and ExportPDF to automate production of PDF files.
    """

    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):

        self.addParameter(
            QgsProcessingParameterString(self.INPUT,
                                       'Project XML')
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(self.OUTPUT,
                                                  'QGIS project output',
                                                  'QGIS project files (*.qgs)')
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        text = self.parameterAsString(parameters, self.INPUT, context)
        output_file = self.parameterAsFile(parameters, self.OUTPUT, context)

        open(output_file, 'w').write(text)

        return {self.OUTPUT: output_file}

class ProjectCurrent(SpcAlgorithm):
    """
    ProjectCurrent takes no input and returns the open qgis project as a file.

    It can be used in conjunction with ReplaceDataSource and ExportPDF to automate production of PDF files.
    """

    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):

        self.addParameter(
            QgsProcessingParameterFileDestination(self.OUTPUT,
                                                  'QGIS project output',
                                                  'QGIS project files (*.qgs)')
        )

    def processAlgorithm(self, parameters, context, feedback):
        output_file = self.parameterAsFile(parameters, self.OUTPUT, context)

        # if no project file is specified, we create a temp file from the current project
        if not output_file:
            temp_dir = QTemporaryDir()
            temp_dir.setAutoRemove(False)
            output_file = os.path.join(temp_dir.path(),'temp_qgis_project')

        current_project = QgsProject.instance()

        # store the current path to restore it afterwards
        current_path = current_project.absoluteFilePath()
        # store the current use absolute path settings to restore it afterwards
        current_abs_path_setting = current_project.readBoolEntry('Paths','/Absolute', False)[0]

        # set use absolute path
        current_project.writeEntry('Paths','/Absolute', True)

        # write the project
        current_project.write(output_file)

        # retore initial settings
        current_project.writeEntry('Paths','/Absolute', current_abs_path_setting)
        current_project.setFileName(current_path)

        return {self.OUTPUT: output_file}

class LayerDataSource(SpcAlgorithm):
    """
    LayerDataSource returns the datasource of a layer.

    It can be useful in conjunction with ReplaceLayerInProject.
    """

    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
    
        self.addParameter(
            QgsProcessingParameterMapLayer(self.INPUT, 'Layer')
        )
    
        self.addOutput(
            QgsProcessingOutputString(self.OUTPUT, 'Datasource')
        )

    def processAlgorithm(self, parameters, context, feedback):
        map_layer = self.parameterAsLayer(parameters, self.INPUT, context)

        return {self.OUTPUT:  map_layer.source()}

class LayerID(SpcAlgorithm):
    """
    LayerID returns the id of a layer.

    It can be useful in conjunction with ReplaceLayerInProject.
    """

    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
    
        self.addParameter(
            QgsProcessingParameterMapLayer(self.INPUT, 'Layer')
        )
    
        self.addOutput(
            QgsProcessingOutputString(self.OUTPUT, 'Id')
        )

    def processAlgorithm(self, parameters, context, feedback):
        map_layer = self.parameterAsLayer(parameters, self.INPUT, context)

        return {self.OUTPUT:  map_layer.id()}

class ReplaceLayerInProject(SpcAlgorithm):
    """
    ReplaceLayerInProject replaces a layer's datasource in a project file, and returns the modified file.

    It can be useful in conjunction with ExportPDF to automate production of PDF files.
    """

    INPUT = 'INPUT'
    OLD_LAYER_ID = 'OLD_LAYER_ID'
    NEW_LAYER = 'NEW_LAYER'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):

        self.addParameter(
            QgsProcessingParameterFile(self.INPUT,
                                        'Initial QGIS project',
                                        behavior=QgsProcessingParameterFile.File,
                                        extension='qgs')
        )

        self.addParameter(
            QgsProcessingParameterString(self.OLD_LAYER_ID,
                                       'Old layer ID')
        )

        self.addParameter(
            QgsProcessingParameterMapLayer(self.NEW_LAYER,
                                       'New layer')
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(self.OUTPUT,
                                                  'Modified QGIS project',
                                                  'QGIS project files (*.qgs)')
        )

    def processAlgorithm(self, parameters, context, feedback):
        # This implementation writes to the project XML directly

        """
        Here is where the processing itself takes place.
        """

        # get the parameter values
        input_file = self.parameterAsFile(parameters, self.INPUT, context)
        old_layer_id = self.parameterAsString(parameters, self.OLD_LAYER_ID, context)
        new_layer = self.parameterAsLayer(parameters, self.NEW_LAYER, context)
        output_file = self.parameterAsFile(parameters, self.OUTPUT, context)

        # if the new layer is in memory, we need to save it temporarily somewhere
        if new_layer.dataProvider().name() == 'memory':
            t = QTemporaryDir()
            t.setAutoRemove(False)
            new_layer_source = os.path.join(t.path(),'t.geojson')
            QgsVectorFileWriter.writeAsVectorFormat(new_layer,new_layer_source,"ut8",new_layer.crs(),"GeoJSON")
        else:
            new_layer_source = new_layer.source()

        tree = et.parse(input_file)
        root = tree.getroot()

        # Map Layers
        nodes = root.findall("projectlayers/maplayer[id='"+old_layer_id+"']/datasource")
        for node in nodes:
            node.text = new_layer_source
        if not nodes:
            feedback.reportError("No map layer with id {} found".format(old_layer_id))
        else:
            feedback.pushInfo("{} map layers replaced".format(len(nodes)))

        # Layer tree
        nodes = root.findall("layer-tree-group/layer-tree-layer[@id='"+old_layer_id+"']")
        for node in nodes:
            node.attrib['source'] = new_layer_source
        feedback.pushInfo("{} layers replaced in the tree".format(len(nodes)))

        # Legend
        nodes = root.findall("Layouts/Layout/LayoutItem/layer-tree-group/layer-tree-layer[@id='"+old_layer_id+"']")
        for node in nodes:
            node.attrib['source'] = new_layer_source
        feedback.pushInfo("{} layers replaced in layout legends the tree".format(len(nodes)))

        tree.write(output_file)

        # done !!
        return {self.OUTPUT: output_file}

class ExportPDF(SpcAlgorithm):
    """
    ExportPDF 
    """

    BASE_PROJECT = 'BASE_PROJECT'
    LAYOUT_NAME = 'LAYOUT_NAME'
    OUTPUT_FOLDER = 'OUTPUT_FOLDER'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFile (
                self.BASE_PROJECT,
                self.tr('Base project'),
                behavior=QgsProcessingParameterFile.File,
                extension='qgs',
            )
        )

        self.addParameter(
            QgsProcessingParameterString (
                self.LAYOUT_NAME,
                self.tr('Layout name'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.OUTPUT_FOLDER,
                self.tr('Output folder'),
                behavior=QgsProcessingParameterFile.Folder,
                extension='pdf',
                optional=False,
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # get the parameter values
        base_project = self.parameterAsFile(parameters, self.BASE_PROJECT, context)
        layout_name = self.parameterAsString(parameters, self.LAYOUT_NAME, context)
        output_folder = self.parameterAsFile(parameters, self.OUTPUT_FOLDER, context)

        # instantiation of the project
        project_instance = QgsProject()
        project_instance.read(base_project)

        # find next available file name
        i=0
        output_file = None
        while not output_file or os.path.exists(output_file):
            i+=1
            output_file = os.path.join(output_folder, str(i).zfill(3)+'.pdf')

        # actual export of the PDF
        if layout_name:
            layout = project_instance.layoutManager().layoutByName(layout_name)
        else:
            layout = project_instance.layoutManager().layouts()[0]
        assert(layout is not None, "No layout found")
        export = QgsLayoutExporter(layout)
        export.exportToPdf(output_file, QgsLayoutExporter.PdfExportSettings())

        # debug
        project_instance.write(output_file+"debug.qgs")

        # done !!
        return {}
