# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProcessingPDF
                                 A QGIS plugin
 Allow to export PDFs from Processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-10
        copyright            : (C) 2018 by Olivier Dalang / SPC
        email                : olivier.dalang@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Olivier Dalang / SPC'
__date__ = '2018-09-10'
__copyright__ = '(C) 2018 by Olivier Dalang / SPC'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import Qt, QCoreApplication, QFile, QTemporaryDir
from qgis.PyQt.QtXml import QDomDocument
from qgis.PyQt.QtWidgets import (QWidget,
                                 QVBoxLayout,
                                 QHBoxLayout,
                                 QPushButton,
                                 QLabel,
                                 QPlainTextEdit,
                                 QLineEdit,
                                 QComboBox,
                                 QListWidget,
                                 QCheckBox,
                                 QSizePolicy,
                                 QDialogButtonBox,
                                 QListWidgetItem)

from qgis.core import (Qgis,
                       QgsFeatureSink,
                       QgsProcessingOutputString,
                       QgsProcessing,
                       QgsProcessingFeedback,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterMultipleLayers,
                       QgsProcessingParameterString,
                       QgsProcessingParameterRasterDestination,
                       QgsProject,
                       QgsMessageLog,
                       QgsReadWriteContext,
                       QgsVectorFileWriter,
                       QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform)

from processing.gui.AlgorithmDialog import AlgorithmDialog
from processing.gui.AlgorithmDialogBase import AlgorithmDialogBase
from processing.gui.ParametersPanel import ParametersPanel
from processing.gui.MultipleInputPanel import MultipleInputPanel
from processing.gui.NumberInputPanel import NumberInputPanel
from processing.gui.DestinationSelectionPanel import DestinationSelectionPanel
from processing.tools.dataobjects import createContext

import os.path
import tempfile
import shutil
import subprocess
import configparser



class TCRMAlgorithm(QgsProcessingAlgorithm):

    INPUT = 'INPUT'
    FIELD_NUM = 'FIELD_NUM'
    FIELD_DATE = 'FIELD_DATE'
    FIELD_PRESSURE = 'FIELD_PRESSURE'
    FIELD_RMAX = 'FIELD_RMAX'
    OUTPUT_WIND = 'OUTPUT_WIND'
    OUTPUT_PRESSURE = 'OUTPUT_PRESSURE'

    COMMAND_LINE = '"C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker" run -v {output_dir}:/home/src/output -v {input_dir}:/home/src/input_2 olivierdalang/tcrm python tcevent.py -v -c input_2/{config_file}'


    def initAlgorithm(self, config):

        self.addParameter(
            QgsProcessingParameterFeatureSource(self.INPUT, self.tr('Input point layer'), [QgsProcessing.TypeVectorPoint])
        )

        self.addParameter(
            QgsProcessingParameterField(self.FIELD_DATE, self.tr('Date field'), parentLayerParameterName=self.INPUT)
        )
        self.addParameter(
            QgsProcessingParameterField(self.FIELD_PRESSURE, self.tr('Pressure field'), parentLayerParameterName=self.INPUT)
        )
        self.addParameter(
            QgsProcessingParameterField(self.FIELD_RMAX, self.tr('Rmax field'), parentLayerParameterName=self.INPUT)
        )
        
        self.addParameter(
            QgsProcessingParameterRasterDestination(self.OUTPUT_WIND, self.tr('Maximum wind speed'))
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(self.OUTPUT_PRESSURE, self.tr('Sea level pressure'))
        )

    def processAlgorithm(self, parameters, context, feedback):


        # Get the parameter values

        input_source = self.parameterAsSource(parameters, self.INPUT, context)
        field_date = self.parameterAsString(parameters, self.FIELD_DATE, context)
        field_pressure = self.parameterAsString(parameters, self.FIELD_PRESSURE, context)
        field_rmax = self.parameterAsString(parameters, self.FIELD_RMAX, context)
        output_wind = self.parameterAsOutputLayer(parameters, self.OUTPUT_WIND, context)
        output_pressure = self.parameterAsOutputLayer(parameters, self.OUTPUT_PRESSURE, context)
        
        # Get the transformation

        sourceCrs = input_source.sourceCrs()
        destCrs = QgsCoordinateReferenceSystem(4326)
        crsTransform = QgsCoordinateTransform(sourceCrs, destCrs, context.transformContext())

        # Set input and output folders

        input_folder = QTemporaryDir()
        input_folder.setAutoRemove(False)
        input_folder = input_folder.path()

        output_folder = QTemporaryDir()
        output_folder.setAutoRemove(False)
        output_folder = output_folder.path()

        input_folder = 'C:\\Users\\Olivier\\Desktop\\testinput'
        output_folder = 'C:\\Users\\Olivier\\Desktop\\testoutput'

        # Config	asWktPolygon
        QgsMessageLog.logMessage("*"*80)
        QgsMessageLog.logMessage(input_source.sourceExtent().asWktPolygon())
        extent = crsTransform.transform(input_source.sourceExtent())
        QgsMessageLog.logMessage(str(extent))
        gridLimit = {'xMin':extent.xMinimum(),'xMax':extent.xMaximum(), 'yMin':extent.yMinimum(), 'yMax':extent.yMaximum()}

        # Load default config and adapt it

        config = configparser.ConfigParser()
        config.read(os.path.join(os.path.dirname(os.path.abspath(__file__)),'tcrm.ini'))

        config['Region']['gridLimit'] = str(gridLimit)

        # TODO : adapt the config

        # Write config and CSV to output folder
        input_ini = os.path.join(input_folder,'tcrm.ini')
        config.write(open(input_ini, 'w'))

        input_csv = os.path.join(input_folder,'tcrm.csv')
        input_csv_file = open(input_csv, 'w')
        

        for i,f in enumerate(input_source.getFeatures()):
            point = f.geometry()
            point.transform(crsTransform)
            # we write the following columns as configured in ini
            line = '{skip},{num},{date},{skip},{skip},{lat},{lon},{skip},{pressure},{rmax}\n'.format(
                skip='',
                num=i,
                date=f.attribute(field_date),
                lat=point.asPoint().y(),
                lon=point.asPoint().x(),
                pressure=f.attribute(field_pressure),
                rmax=f.attribute(field_rmax),
            )
            input_csv_file.write(line)
        input_csv_file.close()
        

        # Run the TCRM model
        command = self.COMMAND_LINE.format(output_dir=output_folder, input_dir=input_folder, config_file='tcrm.ini')
        QgsMessageLog.logMessage("Running "+str(command))
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # QgsMessageLog.logMessage("returncode :")
        # QgsMessageLog.logMessage(str(result.returncode))
        # QgsMessageLog.logMessage("stdout :")
        # QgsMessageLog.logMessage(str(result.stdout))
        # QgsMessageLog.logMessage("stderr :")
        # QgsMessageLog.logMessage(str(result.stderr))


        # Get the output filename
        output_netcdf = os.path.join(output_folder,'windfield','gust.001-00001.nc')
        assert(os.path.exists(output_netcdf))
        # output_vmax = output_netcdf+'.vmax.tif'
        # output_slp = output_netcdf+'.slp.tif'

        # Export the maximum winds
        command = 'gdal_translate -ot float32 -unscale -CO COMPRESS=deflate NETCDF:"{}":vmax {}'.format(output_netcdf, output_wind)
        QgsMessageLog.logMessage("Running "+str(command))
        subprocess.run(command, shell=True)

        # Export the sea level pressure
        command = 'gdal_translate -ot float32 -unscale -CO COMPRESS=deflate NETCDF:"{}":slp {}'.format(output_netcdf, output_pressure)
        QgsMessageLog.logMessage("Running "+str(command))
        subprocess.run(command, shell=True)


        


        QgsMessageLog.logMessage("Done !")

        return {self.OUTPUT_WIND: output_wind, self.OUTPUT_PRESSURE: output_pressure}

    def name(self):
        return 'tcrm'

    def displayName(self):
        return self.tr(self.name())

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return 'models'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return TCRMAlgorithm()
