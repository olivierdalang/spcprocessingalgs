# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProcessingPDF
                                 A QGIS plugin
 Allow to export PDFs from Processing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-10
        copyright            : (C) 2018 by Olivier Dalang / SPC
        email                : olivier.dalang@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Olivier Dalang / SPC'
__date__ = '2018-09-10'
__copyright__ = '(C) 2018 by Olivier Dalang / SPC'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import Qt, QCoreApplication, QFile, QTemporaryDir
from qgis.PyQt.QtXml import QDomDocument
from qgis.PyQt.QtWidgets import (QWidget,
                                 QVBoxLayout,
                                 QHBoxLayout,
                                 QPushButton,
                                 QLabel,
                                 QPlainTextEdit,
                                 QLineEdit,
                                 QComboBox,
                                 QListWidget,
                                 QCheckBox,
                                 QSizePolicy,
                                 QDialogButtonBox,
                                 QListWidgetItem)

from qgis.core import (Qgis,
                       QgsFeatureSink,
                       QgsProcessing,
                       QgsProcessingFeedback,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterMultipleLayers,
                       QgsProcessingParameterString,
                       QgsProject,
                       QgsMessageLog,
                       QgsReadWriteContext,
                       QgsVectorFileWriter)

from processing.gui.AlgorithmDialog import AlgorithmDialog
from processing.gui.AlgorithmDialogBase import AlgorithmDialogBase
from processing.gui.ParametersPanel import ParametersPanel
from processing.gui.MultipleInputPanel import MultipleInputPanel
from processing.gui.NumberInputPanel import NumberInputPanel
from processing.gui.DestinationSelectionPanel import DestinationSelectionPanel
from processing.tools.dataobjects import createContext

import os.path
import tempfile
import shutil

class ProcessingPDFAlgorithm(QgsProcessingAlgorithm):

    BASE_PROJECT = 'BASE_PROJECT'
    LAYOUT_NAME = 'LAYOUT_NAME'
    LAYERS_TEMPLATES = 'LAYERS_TEMPLATES'
    LAYERS_OVERRIDES = 'LAYERS_OVERRIDES'
    OUTPUT_FOLDER = 'OUTPUT_FOLDER'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFile (
                self.BASE_PROJECT,
                self.tr('Base project (leave empty for current project)'),
                behavior=QgsProcessingParameterFile.File,
                extension='qgs',
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterString (
                self.LAYOUT_NAME,
                self.tr('Layout name'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterString (
                self.LAYERS_TEMPLATES,
                self.tr('Template layers (layers to be replaced - comma separated layer ids - order is important)'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterMultipleLayers (
                self.LAYERS_OVERRIDES,
                self.tr('Override layers (layers that will replace templates - order is important)'),
                layerType=QgsProcessing.TypeMapLayer,
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.OUTPUT_FOLDER,
                self.tr('Output folder'),
                behavior=QgsProcessingParameterFile.Folder,
                extension='pdf',
                optional=False,
            )
        )

    def createCustomParametersWidget(self, parent):
        return PdfAlgorithmDialog(self)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # get the parameter values
        base_project = self.parameterAsFile(parameters, self.BASE_PROJECT, context)
        layout_name = self.parameterAsString(parameters, self.LAYOUT_NAME, context)
        layers_templates = self.parameterAsString(parameters, self.LAYERS_TEMPLATES, context)
        layers_overrides = self.parameterAsLayerList(parameters, self.LAYERS_OVERRIDES, context)
        output_folder = self.parameterAsFile(parameters, self.OUTPUT_FOLDER, context)

        QgsMessageLog.logMessage("-- ORDER TEST -- See https://issues.qgis.org/issues/19836 --",'PDF alg')
        QgsMessageLog.logMessage(str([l.name() for l in layers_overrides]),'PDF alg')

        # if no project file is specified, we create a temp file from the current project
        if not base_project:
            temp_dir = QTemporaryDir()
            temp_dir.setAutoRemove(False)
            base_project = os.path.join(temp_dir.path(),'temp_qgis_project')
            QgsProject.instance().write(base_project)

        # instantiation of the project
        project_instance = QgsProject()
        project_instance.read(base_project)
        
        # replace template layers datasources by override layers datasources
        template_layer_ids = reversed(layers_templates.split(','))
        for i,template_layer_id in enumerate(template_layer_ids):
            template_layer = project_instance.mapLayer(template_layer_id)
            template_uri = template_layer.dataProvider().dataSourceUri()
            override_layer = layers_overrides[i]
            # if the override layer is in memory, we need to write it to disk,
            # as we can't transfer memory layers from one project to another
            if override_layer.dataProvider().name() == 'memory':
                temp_dir = QTemporaryDir()
                temp_dir.setAutoRemove(False)
                temp_path = os.path.join(temp_dir.path(),'temp.geojson')
                QgsVectorFileWriter.writeAsVectorFormat(override_layer,temp_path,"utf-8",override_layer.crs(),"GeoJSON")
                override_uri = temp_path
            else:
                override_uri = override_layer.dataProvider().dataSourceUri()

            template_layer.dataProvider().setDataSourceUri(override_uri)
            #debug
            QgsMessageLog.logMessage('replacing {} by {}'.format(template_uri,override_uri),'PDF alg')

        # actual export of the PDF
        layout = project_instance.layoutManager().layoutByName(layout_name) # TODO : pick first layout if empty
        export = QgsLayoutExporter(layout)

        i=0
        output_file = None
        while not output_file or os.path.exists(output_file):
            i+=1
            output_file = os.path.join(output_folder, str(i).zfill(3)+'.pdf')

        export.exportToPdf(output_file, QgsLayoutExporter.PdfExportSettings())

        # debug
        project_instance.write(output_file+"debug.qgs")

        # done !!
        return {}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Export to PDF'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Utils'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ProcessingPDFAlgorithm()

class PdfAlgorithmDialog(AlgorithmDialog):

    def __init__(self, alg):
        super().__init__(alg)

    def getParametersPanel(self, alg, parent):
        return PdfParametersPanel(parent, alg)

    def accept(self):
        if not self.mainWidget().validate():
            self.messageBar().pushMessage("", "You must have the same number of template layers than override layers",level=Qgis.Warning, duration=5)
        else:
            return super().accept()

class PdfParametersPanel(ParametersPanel):

    def __init__(self, parent, alg):
        super().__init__(parent, alg)

        # assign widgets
        self.project_path_widget = self.layoutMain.itemAt(1).widget()
        self.layout_name_widget = self.layoutMain.itemAt(3).widget()
        self.template_layers_widget = self.layoutMain.itemAt(5).widget()
        self.override_layers_widget = self.layoutMain.itemAt(7).widget()

        # inject helpers widgets
        self.layouts_combobox = QComboBox()
        self.inject_helper_widget(self.layout_name_widget, self.layouts_combobox)

        self.template_list = QListWidget()
        self.template_list.setSelectionMode(QListWidget.MultiSelection)
        self.template_list_toggle = QPushButton("Pick")
        self.inject_helper_widget(self.template_layers_widget, self.template_list_toggle)

        # initialize
        self.project_path_changed()

        # connect signals
        self.template_list_toggle.pressed.connect(self.toggle_template_list_widget)

        self.project_path_widget.leText.textChanged.connect(self.project_path_changed)
        self.layouts_combobox.activated[str].connect(self.layouts_combobox_activated)
        self.template_list.itemSelectionChanged.connect(self.template_list_selection_changed)
        
        self.project_path_widget.leText.textChanged.connect(self.validate)
        self.layout_name_widget.textChanged.connect(self.validate)
        self.template_layers_widget.textChanged.connect(self.validate)
        self.override_layers_widget.selectionChanged.connect(self.validate)

    def inject_helper_widget(self, widget, helper_widget):
        """
        Helper to add a widget to the right of an existing widget (e.g. to add a button)
        """
        hboxwidget = QWidget()
        hboxwidget.setLayout(QHBoxLayout())
        hboxwidget.layout().setContentsMargins(0,0,0,0)
        self.layoutMain.replaceWidget(widget, hboxwidget)
        hboxwidget.layout().addWidget(widget)
        hboxwidget.layout().addWidget(helper_widget)

    def toggle_template_list_widget(self):
        self.template_list.show()

    def project_path_changed(self):
        project_path = self.project_path_widget.getValue()
        if project_path:
            self.project_instance = QgsProject()
            self.project_instance.read(project_path)
        else:
            self.project_instance = QgsProject.instance()

        # repopulate the layouts dropdown
        layout_manager = self.project_instance.layoutManager()
        self.layouts_combobox.clear()
        for layout in layout_manager.layouts():
            self.layouts_combobox.addItem(layout.name())

        # repopulate the template layers
        layers = [self.project_instance.mapLayer(l_id) for l_id in self.project_instance.mapLayers()]
        self.template_list.clear()
        for layer in reversed(layers):
            item = QListWidgetItem(layer.name())
            item.setData(Qt.UserRole, layer.id())
            self.template_list.addItem(item)

    def layouts_combobox_activated(self, text):
        self.layout_name_widget.setText(text)

    def template_list_selection_changed(self):
        layers_ids = [item.data(Qt.UserRole) for item in self.template_list.selectedItems()]
        self.template_layers_widget.setText(','.join(layers_ids))

    def validate(self):
        template_layers_count = len(self.template_layers_widget.text().split(',')) if self.template_layers_widget.text() else 0
        override_layers_count = len(self.override_layers_widget.selectedoptions)
        return template_layers_count == override_layers_count
